(1 * 2) -o (2 * 1) : \ pair. let (left , right) = pair
                             in (right , left)

(1 + 2) -o (2 + 1) : \ sum. case sum return 2 + 1
                            of left  -> inr left
                            |  right -> inl right

(1 -o 2) -o 1 -o 2 : \ fun. \ arg. fun arg

(1 + 1) -o 1 : \ sum. case sum return 1
                      of left  -> (\ x. x : 1 -o 1) left
                       | right -> right

(1 & 2) -o (2 & 1) : \ pair. (snd pair, fst pair)

1 -o 2 : \x. x
