('a * 'b) -o ('b * 'a) : \ pair. let (left , right) = pair
                             in (right , left)

('a + 'b) -o ('b + 'a) : \ sum. case sum return 'b + 'a
                            of left  -> inr left
                            |  right -> inl right

('a -o 'b) -o 'a -o 'b : \ fun. \ arg. fun arg

('a + 'a) -o 'a : \ sum. case sum return 'a
                      of left  -> (\ x. x : 'a -o 'a) left
                       | right -> right

('a & 'b) -o ('b & 'a) : \ pair. (snd pair, fst pair)

1 -o 'b : \x. x

(1 -o ('a + 1)) * (1 & ('a -o 1)) -o 1 : \ pair. let (fun , sink) = pair
          in case fun unit return 1
             of a   -> (snd sink) a
              | one -> (one; fst sink)
